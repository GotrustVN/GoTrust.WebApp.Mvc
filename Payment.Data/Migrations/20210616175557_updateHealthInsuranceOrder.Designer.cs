// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Payment.Data.Context;

namespace Payment.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210616175557_updateHealthInsuranceOrder")]
    partial class updateHealthInsuranceOrder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Payment.Data.Entities.Bank", b =>
                {
                    b.Property<string>("bankCode")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("bankLogo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("bankName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("bankShortName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 6, 17, 0, 55, 56, 755, DateTimeKind.Local).AddTicks(5451));

                    b.Property<string>("createdByusername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("lastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 6, 17, 0, 55, 56, 758, DateTimeKind.Local).AddTicks(3064));

                    b.Property<string>("lastUpdatedByusername")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("bankCode");

                    b.HasIndex("createdByusername");

                    b.HasIndex("lastUpdatedByusername");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("Payment.Data.Entities.Customer", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("districtcode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("fax")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("fullAddress")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("gendercode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("identityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("identityNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("identityPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("provincecode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("taxCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("typecode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("wardcode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("code");

                    b.HasIndex("districtcode");

                    b.HasIndex("gendercode");

                    b.HasIndex("provincecode");

                    b.HasIndex("typecode");

                    b.HasIndex("wardcode");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Payment.Data.Entities.CustomerType", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 6, 17, 0, 55, 56, 768, DateTimeKind.Local).AddTicks(6200));

                    b.Property<string>("createdByusername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("lastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 6, 17, 0, 55, 56, 768, DateTimeKind.Local).AddTicks(6634));

                    b.Property<string>("lastUpdatedByusername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("code");

                    b.HasIndex("createdByusername");

                    b.HasIndex("lastUpdatedByusername");

                    b.ToTable("CustomerType");

                    b.HasData(
                        new
                        {
                            code = "CN",
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            lastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Cá nhân"
                        },
                        new
                        {
                            code = "CQ",
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            lastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Cơ quan"
                        },
                        new
                        {
                            code = "DN",
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            lastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Doanh nghiệp"
                        });
                });

            modelBuilder.Entity("Payment.Data.Entities.District", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("provincecode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("code");

                    b.HasIndex("provincecode");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Payment.Data.Entities.FileImport", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 6, 17, 0, 55, 56, 788, DateTimeKind.Local).AddTicks(2720));

                    b.Property<string>("createdByusername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("fileName")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("lastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 6, 17, 0, 55, 56, 788, DateTimeKind.Local).AddTicks(3058));

                    b.Property<string>("lastUpdatedByusername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("savePath")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("code");

                    b.HasIndex("createdByusername");

                    b.HasIndex("lastUpdatedByusername");

                    b.ToTable("FileImport");
                });

            modelBuilder.Entity("Payment.Data.Entities.Gender", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("code");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            code = "M",
                            name = "Nam"
                        },
                        new
                        {
                            code = "F",
                            name = "Nữ"
                        });
                });

            modelBuilder.Entity("Payment.Data.Entities.HealthInsuranceDetail", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(19,9)");

                    b.Property<string>("customerCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("customerDateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("customerDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerFullAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerGender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("customerIdentityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("customerIdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerIdentityPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerNationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerProvince")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerTaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerWard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("effectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("expirationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("fees")
                        .HasColumnType("decimal(19,9)");

                    b.Property<string>("ordercode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("packCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("relationshipcode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("totalAdd")
                        .HasColumnType("decimal(19,9)");

                    b.Property<decimal>("totalAmount")
                        .HasColumnType("decimal(19,9)");

                    b.Property<decimal>("totalDiscount")
                        .HasColumnType("decimal(19,9)");

                    b.Property<decimal>("vat")
                        .HasColumnType("decimal(19,9)");

                    b.HasKey("id");

                    b.HasIndex("ordercode");

                    b.HasIndex("relationshipcode");

                    b.ToTable("HealthInsuranceDetail");
                });

            modelBuilder.Entity("Payment.Data.Entities.HealthInsuranceOrder", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buyerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buyerCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("buyerDateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("buyerDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buyerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buyerFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buyerFullAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buyerGender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("buyerIdentityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("buyerIdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buyerIdentityPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buyerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buyerNationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buyerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buyerProvince")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buyerTaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buyerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buyerWard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categorycode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("channel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("paymentid")
                        .HasColumnType("int");

                    b.Property<string>("productCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("code");

                    b.HasIndex("buyerCode");

                    b.HasIndex("categorycode");

                    b.HasIndex("paymentid");

                    b.ToTable("HealthInsuranceOrder");
                });

            modelBuilder.Entity("Payment.Data.Entities.HealthInsurancePayment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("payDate")
                        .HasColumnType("datetime");

                    b.Property<string>("paymentType")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("id");

                    b.ToTable("HealthInsurancePayment");
                });

            modelBuilder.Entity("Payment.Data.Entities.Language", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("code");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            code = "en",
                            name = "English"
                        },
                        new
                        {
                            code = "vn",
                            name = "Việt Nam"
                        });
                });

            modelBuilder.Entity("Payment.Data.Entities.MasterCategory", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdByusername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("group")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("lastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("lastUpdatedByusername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("code");

                    b.HasIndex("createdByusername");

                    b.HasIndex("lastUpdatedByusername");

                    b.ToTable("MasterCategory");
                });

            modelBuilder.Entity("Payment.Data.Entities.OrderInfor", b =>
                {
                    b.Property<string>("orderId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(19,9)");

                    b.Property<string>("bankCode")
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 6, 17, 0, 55, 56, 774, DateTimeKind.Local).AddTicks(2290));

                    b.Property<string>("createdByusername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("lastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 6, 17, 0, 55, 56, 774, DateTimeKind.Local).AddTicks(2754));

                    b.Property<string>("lastUpdatedByusername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("message")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("orderDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("responseCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("statuscode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("transactionNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("typecode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("orderId");

                    b.HasIndex("bankCode");

                    b.HasIndex("createdByusername");

                    b.HasIndex("lastUpdatedByusername");

                    b.HasIndex("statuscode");

                    b.HasIndex("typecode");

                    b.ToTable("OrderInfor");
                });

            modelBuilder.Entity("Payment.Data.Entities.OrderStatus", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("backgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 6, 17, 0, 55, 56, 775, DateTimeKind.Local).AddTicks(6737));

                    b.Property<string>("createdByusername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("forceColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("lastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 6, 17, 0, 55, 56, 775, DateTimeKind.Local).AddTicks(7093));

                    b.Property<string>("lastUpdatedByusername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("code");

                    b.HasIndex("createdByusername");

                    b.HasIndex("lastUpdatedByusername");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            code = "00001",
                            backgroundColor = "transparent",
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            forceColor = "black",
                            lastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Chưa thanh tóan"
                        },
                        new
                        {
                            code = "00002",
                            backgroundColor = "transparent",
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            forceColor = "green",
                            lastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Đã thanh tóan"
                        },
                        new
                        {
                            code = "00003",
                            backgroundColor = "transparent",
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            forceColor = "red",
                            lastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Giao dịch lỗi"
                        });
                });

            modelBuilder.Entity("Payment.Data.Entities.OrderType", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 6, 17, 0, 55, 56, 777, DateTimeKind.Local).AddTicks(4950));

                    b.Property<string>("createdByusername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("lastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 6, 17, 0, 55, 56, 777, DateTimeKind.Local).AddTicks(5357));

                    b.Property<string>("lastUpdatedByusername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("shortName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("code");

                    b.HasIndex("createdByusername");

                    b.HasIndex("lastUpdatedByusername");

                    b.ToTable("OrderType");

                    b.HasData(
                        new
                        {
                            code = "topup",
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            lastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Nạp tiền điện thoại",
                            note = "TEST",
                            shortName = "Nạp tiền điện thoại"
                        },
                        new
                        {
                            code = "billpayment",
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            lastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Thanh toán hóa đơn",
                            note = "TEST",
                            shortName = "Thanh toán hóa đơn"
                        },
                        new
                        {
                            code = "fashion",
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            lastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Thời trang",
                            note = "TEST",
                            shortName = "Thời trang"
                        },
                        new
                        {
                            code = "other",
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            lastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Thanh toán trực tuyến",
                            note = "TEST",
                            shortName = "Thanh toán trực tuyến"
                        });
                });

            modelBuilder.Entity("Payment.Data.Entities.PaymentLog", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("bankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bankTranNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 6, 17, 0, 55, 56, 780, DateTimeKind.Local).AddTicks(3981));

                    b.Property<string>("createdByusername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("lastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2021, 6, 17, 0, 55, 56, 780, DateTimeKind.Local).AddTicks(4386));

                    b.Property<string>("lastUpdatedByusername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("orderInfor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("payDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("responseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("secureHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tmnCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("transactionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("txnRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("createdByusername");

                    b.HasIndex("lastUpdatedByusername");

                    b.ToTable("PaymentLog");
                });

            modelBuilder.Entity("Payment.Data.Entities.Province", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("code");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("Payment.Data.Entities.User", b =>
                {
                    b.Property<string>("username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("hashkey")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("password")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("username");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Payment.Data.Entities.Ward", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("districtcode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("code");

                    b.HasIndex("districtcode");

                    b.ToTable("Ward");
                });

            modelBuilder.Entity("Payment.Data.Entities.Bank", b =>
                {
                    b.HasOne("Payment.Data.Entities.User", "createdBy")
                        .WithMany()
                        .HasForeignKey("createdByusername");

                    b.HasOne("Payment.Data.Entities.User", "lastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("lastUpdatedByusername");

                    b.Navigation("createdBy");

                    b.Navigation("lastUpdatedBy");
                });

            modelBuilder.Entity("Payment.Data.Entities.Customer", b =>
                {
                    b.HasOne("Payment.Data.Entities.District", "district")
                        .WithMany()
                        .HasForeignKey("districtcode");

                    b.HasOne("Payment.Data.Entities.Gender", "gender")
                        .WithMany()
                        .HasForeignKey("gendercode");

                    b.HasOne("Payment.Data.Entities.Province", "province")
                        .WithMany()
                        .HasForeignKey("provincecode");

                    b.HasOne("Payment.Data.Entities.CustomerType", "type")
                        .WithMany()
                        .HasForeignKey("typecode");

                    b.HasOne("Payment.Data.Entities.Ward", "ward")
                        .WithMany()
                        .HasForeignKey("wardcode");

                    b.Navigation("district");

                    b.Navigation("gender");

                    b.Navigation("province");

                    b.Navigation("type");

                    b.Navigation("ward");
                });

            modelBuilder.Entity("Payment.Data.Entities.CustomerType", b =>
                {
                    b.HasOne("Payment.Data.Entities.User", "createdBy")
                        .WithMany()
                        .HasForeignKey("createdByusername");

                    b.HasOne("Payment.Data.Entities.User", "lastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("lastUpdatedByusername");

                    b.Navigation("createdBy");

                    b.Navigation("lastUpdatedBy");
                });

            modelBuilder.Entity("Payment.Data.Entities.District", b =>
                {
                    b.HasOne("Payment.Data.Entities.Province", "province")
                        .WithMany()
                        .HasForeignKey("provincecode");

                    b.Navigation("province");
                });

            modelBuilder.Entity("Payment.Data.Entities.FileImport", b =>
                {
                    b.HasOne("Payment.Data.Entities.User", "createdBy")
                        .WithMany()
                        .HasForeignKey("createdByusername");

                    b.HasOne("Payment.Data.Entities.User", "lastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("lastUpdatedByusername");

                    b.Navigation("createdBy");

                    b.Navigation("lastUpdatedBy");
                });

            modelBuilder.Entity("Payment.Data.Entities.HealthInsuranceDetail", b =>
                {
                    b.HasOne("Payment.Data.Entities.HealthInsuranceOrder", "order")
                        .WithMany("Details")
                        .HasForeignKey("ordercode");

                    b.HasOne("Payment.Data.Entities.MasterCategory", "relationship")
                        .WithMany()
                        .HasForeignKey("relationshipcode");

                    b.Navigation("order");

                    b.Navigation("relationship");
                });

            modelBuilder.Entity("Payment.Data.Entities.HealthInsuranceOrder", b =>
                {
                    b.HasOne("Payment.Data.Entities.Customer", "buyer")
                        .WithMany()
                        .HasForeignKey("buyerCode");

                    b.HasOne("Payment.Data.Entities.MasterCategory", "category")
                        .WithMany()
                        .HasForeignKey("categorycode");

                    b.HasOne("Payment.Data.Entities.HealthInsurancePayment", "payment")
                        .WithMany()
                        .HasForeignKey("paymentid");

                    b.Navigation("buyer");

                    b.Navigation("category");

                    b.Navigation("payment");
                });

            modelBuilder.Entity("Payment.Data.Entities.MasterCategory", b =>
                {
                    b.HasOne("Payment.Data.Entities.User", "createdBy")
                        .WithMany()
                        .HasForeignKey("createdByusername");

                    b.HasOne("Payment.Data.Entities.User", "lastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("lastUpdatedByusername");

                    b.Navigation("createdBy");

                    b.Navigation("lastUpdatedBy");
                });

            modelBuilder.Entity("Payment.Data.Entities.OrderInfor", b =>
                {
                    b.HasOne("Payment.Data.Entities.Bank", "bank")
                        .WithMany()
                        .HasForeignKey("bankCode");

                    b.HasOne("Payment.Data.Entities.User", "createdBy")
                        .WithMany()
                        .HasForeignKey("createdByusername");

                    b.HasOne("Payment.Data.Entities.User", "lastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("lastUpdatedByusername");

                    b.HasOne("Payment.Data.Entities.OrderStatus", "status")
                        .WithMany()
                        .HasForeignKey("statuscode");

                    b.HasOne("Payment.Data.Entities.OrderType", "type")
                        .WithMany()
                        .HasForeignKey("typecode");

                    b.Navigation("bank");

                    b.Navigation("createdBy");

                    b.Navigation("lastUpdatedBy");

                    b.Navigation("status");

                    b.Navigation("type");
                });

            modelBuilder.Entity("Payment.Data.Entities.OrderStatus", b =>
                {
                    b.HasOne("Payment.Data.Entities.User", "createdBy")
                        .WithMany()
                        .HasForeignKey("createdByusername");

                    b.HasOne("Payment.Data.Entities.User", "lastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("lastUpdatedByusername");

                    b.Navigation("createdBy");

                    b.Navigation("lastUpdatedBy");
                });

            modelBuilder.Entity("Payment.Data.Entities.OrderType", b =>
                {
                    b.HasOne("Payment.Data.Entities.User", "createdBy")
                        .WithMany()
                        .HasForeignKey("createdByusername");

                    b.HasOne("Payment.Data.Entities.User", "lastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("lastUpdatedByusername");

                    b.Navigation("createdBy");

                    b.Navigation("lastUpdatedBy");
                });

            modelBuilder.Entity("Payment.Data.Entities.PaymentLog", b =>
                {
                    b.HasOne("Payment.Data.Entities.User", "createdBy")
                        .WithMany()
                        .HasForeignKey("createdByusername");

                    b.HasOne("Payment.Data.Entities.User", "lastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("lastUpdatedByusername");

                    b.Navigation("createdBy");

                    b.Navigation("lastUpdatedBy");
                });

            modelBuilder.Entity("Payment.Data.Entities.Ward", b =>
                {
                    b.HasOne("Payment.Data.Entities.District", "district")
                        .WithMany()
                        .HasForeignKey("districtcode");

                    b.Navigation("district");
                });

            modelBuilder.Entity("Payment.Data.Entities.HealthInsuranceOrder", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
